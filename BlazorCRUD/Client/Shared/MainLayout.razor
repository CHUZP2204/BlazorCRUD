@inherits LayoutComponentBase
@using BlazorCRUD.Client.Shared;
@using BlazorCRUD.Client.Extensiones;
@using Microsoft.AspNetCore.Components

@using Microsoft.Extensions.Configuration


@using Microsoft.AspNetCore.Components.Authorization;
@inject NavigationManager navManager
@inject AuthenticationStateProvider autenticacionProvider

@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime



<div class="pagina">
    <!-- Siguiente CheckBox Controla Estado De Barra Laterl-->
    <!--Checked = No Aparece Barra Laterl-->
    <!--Sin Checked = Aparece Barra Laterl-->
    <!--Esto Esta Controlado Por CSS-->
    <input type="checkbox" id="mostrar-Barra" @bind="@IsChecked" />

    <!---->
    <div class="barraH">
        <BarraLateral />
    </div>

    <div class="EspacioBlanco">
        <NavMenu />
    </div>
    <div>
    </div>

    <main class="contenido">

        <h6>Pagina Maestra, donde ira el contenido principal</h6>
        <button @onclick="NavigateBack">Volver a la Página Anterior</button>
        <!--<h2>Boton Blazor Activar/Desactivar Barra Lateral</h2>-->
        <!--<button onclick="ToggleCheckbox">Activar/Desactivar</button>-->
        @showBackButton
        <div class="pagina-rotativa">
            @Body
        </div>

    </main>
</div>

@code {
    private bool IsChecked = false;
    private bool showBackButton = true;

    protected override async Task OnInitializedAsync()
    {
        if (bool.TryParse(await JSRuntime.InvokeAsync<string>("localStorage.getItem", "isChecked"), out bool isChecked))
        {
            IsChecked = isChecked;
        }
    }
    private async Task ToggleCheckbox()
    {
        IsChecked = !IsChecked;
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isChecked", IsChecked.ToString());
    }
    private async Task NavigateBack()
    {
        await JSRuntime.InvokeVoidAsync("history.back");
        /*if (await IsLoginPage())
        {

            
        }
        else
        {
            ///
        }*/
        //showBackButton = JSRuntime.InvokeAsync<bool>("window.history.length > 1").Result;

    }
    /* private async Task<bool> IsLoginPage()
          {
          var location = await JSRuntime.InvokeAsync<string>("window.location.pathname");
          return location.ToLowerInvariant() == "/"; // Ajusta la ruta según tu página de inicio de sesión
    }*/
}